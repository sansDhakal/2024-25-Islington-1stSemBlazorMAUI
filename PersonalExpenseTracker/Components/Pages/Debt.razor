@page "/debt"
@using PersonalExpenseTracker.Models
@using PersonalExpenseTracker.Services
@inject ITransactionService transactionService
@inject IDebtService debtService
@inject NavigationManager navigationManager
@inject AuthenticationStateService authService;

<h3 style="text-align: center; color: #007bff; margin-top: 30px; font-size: 2rem;">Debt</h3>

<form class="transaction-form" style="max-width: 600px; margin: 20px auto; padding: 30px; background-color: #ffffff; border-radius: 10px; box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);">
    <div class="form-group" style="margin-bottom: 20px;">
        <label for="amount" style="font-weight: bold; font-size: 16px; color: #333; display: block;">Amount:</label>
        <input type="number" id="amount" class="form-control" @bind="newTransaction.Amount" required style="width: 100%; padding: 12px; margin-top: 8px; border-radius: 6px; border: 1px solid #ccc; font-size: 16px; transition: border-color 0.3s;" />
    </div>

    <div class="form-group" style="margin-bottom: 20px;">
        <label for="source" style="font-weight: bold; font-size: 16px; color: #333; display: block;">Source:</label>
        <input type="text" id="source" class="form-control" @bind="newDebt.Source" required style="width: 100%; padding: 12px; margin-top: 8px; border-radius: 6px; border: 1px solid #ccc; font-size: 16px; transition: border-color 0.3s;" />
    </div>

    <div class="form-group" style="margin-bottom: 20px;">
        <label for="dueDate" style="font-weight: bold; font-size: 16px; color: #333; display: block;">Due Date:</label>
        <input type="date" id="dueDate" class="form-control" @bind="newDebt.DueDate" required style="width: 100%; padding: 12px; margin-top: 8px; border-radius: 6px; border: 1px solid #ccc; font-size: 16px; transition: border-color 0.3s;" />
    </div>

    <div class="form-group" style="margin-bottom: 20px;">
        <label for="tagType" style="font-weight: bold; font-size: 16px; color: #333; display: block;">Tag Type:</label>
        <select id="tagType" class="form-control" @bind="tagType" style="width: 100%; padding: 12px; margin-top: 8px; border-radius: 6px; border: 1px solid #ccc; font-size: 16px; transition: border-color 0.3s;">
            <option value="" disabled selected>Choose your preferred tag type.</option>
            <option value="Custom">Custom</option>
            <option value="Existing">Existing</option>
        </select>
    </div>

    @if (tagType == "Existing")
    {
        <div class="form-group" style="margin-bottom: 20px;">
            <label for="tag" style="font-weight: bold; font-size: 16px; color: #333; display: block;">Tag:</label>
            <select id="tag" class="form-control" @bind="newTransaction.TagId" style="width: 100%; padding: 12px; margin-top: 8px; border-radius: 6px; border: 1px solid #ccc; font-size: 16px; transition: border-color 0.3s;">
                <option value="" disabled selected>Choose your tag.</option>
                <option value="Bank">Bank</option>
                <option value="Family">Family</option>
                <option value="Friend">Friend</option>
                <option value="Others">Others</option>
            </select>
        </div>
    }
    else
    {
        <div class="form-group" style="margin-bottom: 20px;">
            <label for="customTag" style="font-weight: bold; font-size: 16px; color: #333; display: block;">Custom Tag:</label>
            <input type="text" id="customTag" class="form-control" @bind="newTransaction.TagId" style="width: 100%; padding: 12px; margin-top: 8px; border-radius: 6px; border: 1px solid #ccc; font-size: 16px; transition: border-color 0.3s;" />
        </div>
    }

    <div class="form-group" style="margin-bottom: 20px;">
        <label for="title" style="font-weight: bold; font-size: 16px; color: #333; display: block;">Title:</label>
        <input type="text" id="title" class="form-control" @bind="newTransaction.Title" required style="width: 100%; padding: 12px; margin-top: 8px; border-radius: 6px; border: 1px solid #ccc; font-size: 16px; transition: border-color 0.3s;" />
    </div>

    <div class="form-group" style="margin-bottom: 20px;">
        <label for="note" style="font-weight: bold; font-size: 16px; color: #333; display: block;">Note:</label>
        <input type="text" id="note" class="form-control" @bind="newTransaction.Note" style="width: 100%; padding: 12px; margin-top: 8px; border-radius: 6px; border: 1px solid #ccc; font-size: 16px; transition: border-color 0.3s;" />
    </div>

    <button type="button" class="btn btn-primary" @onclick="AddTransaction" style="width: 100%; padding: 14px; background-color: #007bff; color: white; border: none; border-radius: 8px; font-size: 18px; cursor: pointer; transition: background-color 0.3s ease-in-out;">
        Add Debt
    </button>
</form>

@if (errorMessage != null)
{
    <p class="error-message" style="color: red; font-weight: bold; text-align: center; margin-top: 20px; font-size: 16px;">@errorMessage</p>
}

@code {
    private Transactions newTransaction = new Transactions(); //obj created for Transaction Class
    private Debts newDebt = new Debts();

    private string errorMessage;
    private string tagType;

    private async Task AddTransaction()
    {
        // Validation
        if (newTransaction.Amount <= 0)
        {
            errorMessage = "Amount must be greater than zero.";
            return;
        }

        if (string.IsNullOrWhiteSpace(newDebt.Source))
        {
            errorMessage = "Source is required.";
            return;
        }

        if (newDebt.DueDate == default)
        {
            errorMessage = "Due Date is required.";
            return;
        }

        if (string.IsNullOrWhiteSpace(tagType))
        {
            errorMessage = "Tag Type is required.";
            return;
        }

        if (tagType == "Existing" && string.IsNullOrWhiteSpace(newTransaction.TagId))
        {
            errorMessage = "Please select an existing tag.";
            return;
        }

        if (tagType == "Custom" && string.IsNullOrWhiteSpace(newTransaction.TagId))
        {
            errorMessage = "Custom Tag is required.";
            return;
        }

        if (string.IsNullOrWhiteSpace(newTransaction.Title))
        {
            errorMessage = "Title is required.";
            return;
        }

        var user = authService.GetAuthenticatedUser();
        if (user != null)
        {
            newTransaction.UserId = user.UserId;
            try
            {
                newTransaction.TypeId = "Debt"; // because it is a debt

                // Save the new transaction
                int savedTransactionId = await transactionService.SaveTransactionAsync(newTransaction);

                // Adding the transaction id to the debt record
                newDebt.TransactionId = savedTransactionId;
                newDebt.Status = "Pending";
                // Save the debt information of the transaction
                await debtService.SaveDebtAsync(newDebt);

                // Reset the objects after saving
                newTransaction = new Transactions();
                newDebt = new Debts();

                // Clear any previous error messages
                errorMessage = null;

                // Navigate to the desired page after successful signup
                navigationManager.NavigateTo("/allTransactions");
            }
            catch (Exception ex)
            {
                errorMessage = $"An error occurred while adding the transaction: {ex.Message}";
                Console.WriteLine(errorMessage); // Log for debugging
            }
        }
    }
}
