@page "/allTransactions"
@using PersonalExpenseTracker.Models
@using PersonalExpenseTracker.Services
@using PersonalExpenseTracker.Dtos
@inject ITransactionService TransactionService
@inject ITransactionHelperService TransactionHelperService
@inject NavigationManager NavigationManager
@inject IDebtService DebtService
@inject AuthenticationStateService AuthenticationStateService



<!-- Filters Section -->
<div class="filters-section" style="display: grid; gap: 15px; grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));">
    <!-- Search Filter -->
    <div class="filter-item" style="display: flex; flex-direction: column;">
        <label for="search" class="form-label" style="font-size: 0.9rem;">Search</label>
        <input type="search" class="form-control form-control-sm" @bind="searchlist" placeholder="Search by Title" style="font-size: 0.9rem;" />
    </div>

    <!-- Type Filter -->
    <div class="filter-item" style="display: flex; flex-direction: column;">
        <label for="type" class="form-label" style="font-size: 0.9rem;">Type:</label>
        <select @bind="filterType" class="form-select form-select-sm" style="font-size: 0.9rem;">
            <option value="NoFilter">No Filter</option>
            <option value="Credit">Credit</option>
            <option value="Debit">Debit</option>
            <option value="Debt">Debt</option>
        </select>
    </div>

    <!-- Tag Filter -->
    <div class="filter-item" style="display: flex; flex-direction: column;">
        <label for="tag" class="form-label" style="font-size: 0.9rem;">Tag:</label>
        <select @bind="filtertag" class="form-select form-select-sm" style="font-size: 0.9rem;">
            <option value="NoFilter">No Filter</option>
            <option value="Monthly">Monthly</option>
            <option value="Yearly">Yearly</option>
            <option value="Rent">Rent</option>
            <option value="Grocery">Grocery</option>
            <option value="Friend">Friend</option>
        </select>
    </div>

    <!-- Date From Filter -->
    <div class="filter-item" style="display: flex; flex-direction: column;">
        <label for="dateFrom" class="form-label" style="font-size: 0.9rem;">Date From:</label>
        <input type="date" class="form-control form-control-sm" @bind="filterDateFrom" style="font-size: 0.9rem;" />
    </div>

    <!-- Date To Filter -->
    <div class="filter-item" style="display: flex; flex-direction: column;">
        <label for="dateTo" class="form-label" style="font-size: 0.9rem;">Date To:</label>
        <input type="date" class="form-control form-control-sm" @bind="filterDateTo" style="font-size: 0.9rem;" />
    </div>

    <!-- Specific Date Filter -->
    <div class="filter-item" style="display: flex; flex-direction: column;">
        <label for="specificDate" class="form-label" style="font-size: 0.9rem;">Specific Date:</label>
        <input type="date" class="form-control form-control-sm" @bind="specifiedFilterDate" style="font-size: 0.9rem;" />
    </div>

    <!-- Sort Filter -->
    <div class="filter-item" style="display: flex; flex-direction: column;">
        <label for="sort" class="form-label" style="font-size: 0.9rem;">Sort:</label>
        <select @bind="sortOption" class="form-select form-select-sm" style="font-size: 0.9rem;">
            <option value="Id">Default</option>
            <option value="Date">Added Date</option>
        </select>
    </div>

    <!-- Sort Order Filter -->
    <div class="filter-item" style="display: flex; flex-direction: column;">
        <label for="sortOrder" class="form-label" style="font-size: 0.9rem;">Sort Order:</label>
        <select @bind="sortDirection" class="form-select form-select-sm" style="font-size: 0.9rem;">
            <option value="Ascending">Ascending</option>
            <option value="Descending">Descending</option>
        </select>
    </div>
</div>



<br />

<div class="background" style="background-color: #f4f5f5">
    <!-- Transactions List -->
    <div class="text-center">
        <h3 style="color: black; font-weight: bold; margin-bottom: 20px;">Total Transaction</h3>
    </div>


    <table class="table table-striped table-bordered table-hover" style="width: 100%; margin-top: 20px; border-collapse: collapse; border-radius: 8px;">
        <thead style="background-color: #6A80B99; ">
            <tr>
                <th style="padding: 12px 15px; text-align: left;">Title</th>
                <th style="padding: 12px 15px; text-align: left;">Type</th>
                <th style="padding: 12px 15px; text-align: left;">Tag</th>
                <th style="padding: 12px 15px; text-align: left;">Amount</th>
                <th style="padding: 12px 15px; text-align: left;">Date</th>
                <th style="padding: 12px 15px; text-align: left;">Note</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in sortedTransactions)
            {
                <tr style="transition: background-color 0.3s; background-color: #ffffff;">
                    <td style="padding: 12px 15px;">@transaction.Title</td>
                    <td style="padding: 12px 15px;">@transaction.TypeId</td>
                    <td style="padding: 12px 15px;">@transaction.TagId</td>
                    <td style="padding: 12px 15px; font-weight: bold;">@transaction.Amount</td>
                    <td style="padding: 12px 15px;">@transaction.Date.ToShortDateString()</td>
                    <td style="padding: 12px 15px;">@transaction.Note</td>
                </tr>
            }
        </tbody>
    </table>
</div>
<br />

@* Debts *@
<div class="background" style="background-color: #f4f5f5">
    <div class="text-center">
        <h3 style="color: black; font-weight: bold; margin-bottom: 20px;">Debt</h3>
    </div>


<!-- Debts List -->
<table class="table table-striped table-bordered table-hover" style="width: 100%; margin-top: 20px; border-collapse: collapse; border-radius: 8px;">
        <thead style="background-color: #6A80B99; ">
    
        <tr>
                <th style="padding: 12px 15px; text-align: left;">Title</th>
                <th style ="padding: 12px 15px; text-align: left;">Type</th>
                <th style ="padding: 12px 15px; text-align: left;">Tag</th>
                <th style="padding: 12px 15px; text-align: left;">Amount</th>
                <th style ="padding: 12px 15px; text-align: left;">Date</th>
                <th style ="padding: 12px 15px; text-align: left;">Due Date</th>
                <th style="padding: 12px 15px; text-align: left;">Note</th>
                <th style="padding: 12px 15px; text-align: left;">Source</th>
                <th style="padding: 12px 15px; text-align: left;">Status</th>
        </tr>
        </thead>
    <tbody>
        @foreach (var debtTransaction in sortedDebts)
        {
                <tr class="@GetDebtStatusClass(debtTransaction.Status)" style="transition: background-color 0.3s; background-color: #ffffff;">

                    <td style="padding: 12px 15px;">@debtTransaction.Title</td>
                    <td style="padding: 12px 15px;">@debtTransaction.TypeId</td>
                    <td style="padding: 12px 15px;">@debtTransaction.TagId</td>
                    <td style="padding: 12px 15px;">@debtTransaction.Amount</td>
                    <td style="padding: 12px 15px;">@debtTransaction.Date.ToShortDateString()</td>
                    <td style="padding: 12px 15px;">@debtTransaction.DueDate.ToShortDateString()</td>
                    <td style="padding: 12px 15px;">@debtTransaction.Note</td>
                    <td style="padding: 12px 15px;">@debtTransaction.Source</td>
                    <td style ="padding: 12px 15px;">@debtTransaction.Status</td>
                   

                </tr>
        }
    </tbody>
</table>
</div>

@code {
    private User authenticatedUser = new User();

    private List<Transactions> transactions = new List<Transactions>();
    private List<Transactions> debtTransactions = new List<Transactions>();
    private List<Transactions> inflowOutflowTransactions = new List<Transactions>();

    private List<DebtTransactionDto> debtTransactionDtos = new List<DebtTransactionDto>();

    private double currentBalance;
    private double totalInflow;
    private double totalOutflow;
    private double totalRemainingDebt;
    private double totalClearedDebt;

    // for filters
    private IEnumerable<Transactions> filteredTransactions => FilterTransactions();
    private IEnumerable<Transactions> sortedTransactions => SortTransactions(filteredTransactions);

    private IEnumerable<DebtTransactionDto> filteredDebts => FilterDebts();
    private IEnumerable<DebtTransactionDto> sortedDebts => SortDebts(filteredDebts);

    // Filter Properties
    private string filterType = "NoFilter";
    private string filtertag = "NoFilter";
    private DateTime? filterDateFrom;
    private DateTime? filterDateTo;
    private string searchlist;
    private string sortOption;
    private string sortDirection;
    private DateTime? specifiedFilterDate;

    protected override async Task OnInitializedAsync()
    {
        authenticatedUser = AuthenticationStateService.GetAuthenticatedUser();

        transactions = await TransactionService.LoadUsersTransactionsAsync(authenticatedUser.UserId);

        inflowOutflowTransactions = TransactionHelperService.ExtractInflowOutflowTransactions(transactions);
        debtTransactions = TransactionHelperService.ExtractDebtTransactions(transactions);

        debtTransactionDtos = await TransactionHelperService.LoadDebtTransactions(debtTransactions);

        totalInflow = TransactionHelperService.CalculateTotalInflow(inflowOutflowTransactions);
        totalOutflow = TransactionHelperService.CalculateTotalOutflow(inflowOutflowTransactions);
        totalRemainingDebt = TransactionHelperService.CalculateTotalRemainingDebt(debtTransactionDtos);
        totalClearedDebt = TransactionHelperService.CalculateTotalClearedDebt(debtTransactionDtos);

        currentBalance = TransactionHelperService.CalculateCurrentBalance(totalInflow, totalOutflow, totalRemainingDebt);

        if (transactions == null || !transactions.Any())
        {
            Console.WriteLine("No transactions found.");
        }
    }


    private IEnumerable<Transactions> FilterTransactions()
    {
        var filtereddata = inflowOutflowTransactions.AsQueryable();

        if (!string.IsNullOrEmpty(filtertag) && filterType != "NoFilter")
        {
            filtereddata = filtereddata.Where(t => t.TypeId == filterType);
        }

        if (filtertag != "NoFilter")
        {
            filtereddata = filtereddata.Where(t => t.TagId.Contains(filtertag));
        }

        if (!string.IsNullOrEmpty(searchlist))
        {
            filtereddata = filtereddata.Where(t => t.Title.Contains(searchlist, StringComparison.OrdinalIgnoreCase));
        }

        if (specifiedFilterDate.HasValue)
        {
            filtereddata = filtereddata.Where(t => t.Date.Date == specifiedFilterDate.Value.Date);
        }
        else if (filterDateFrom.HasValue || filterDateTo.HasValue)
        {
            filtereddata = filtereddata.Where(t =>
                (!filterDateFrom.HasValue || t.Date.Date >= filterDateFrom.Value.Date) &&
                (!filterDateTo.HasValue || t.Date.Date <= filterDateTo.Value.Date));
        }

        return filtereddata;
    }

    private IEnumerable<Transactions> SortTransactions(IEnumerable<Transactions> filteredTransactions)
    {
        return (sortOption, sortDirection) switch
        {
            ("Id", "Ascending") => filteredTransactions.OrderBy(t => t.TransactionId),
            ("Id", "Descending") => filteredTransactions.OrderByDescending(t => t.TransactionId),
            ("Date", "Ascending") => filteredTransactions.OrderBy(t => t.Date),
            ("Date", "Descending") => filteredTransactions.OrderByDescending(t => t.Date),
            _ => filteredTransactions
        };
    }

    private IEnumerable<DebtTransactionDto> FilterDebts()
    {
        var filtereddata = debtTransactionDtos.AsQueryable();

        if (!string.IsNullOrEmpty(filterType) && filtertag != "NoFilter")
        {
            filtereddata = filtereddata.Where(t => t.TypeId == filterType);
        }

        if (filtertag != "NoFilter")
        {
            filtereddata = filtereddata.Where(t => t.TagId.Contains(filtertag));
        }

        if (!string.IsNullOrEmpty(searchlist))
        {
            filtereddata = filtereddata.Where(t => t.Title.Contains(searchlist, StringComparison.OrdinalIgnoreCase));
        }

        return filtereddata;
    }

    private IEnumerable<DebtTransactionDto> SortDebts(IEnumerable<DebtTransactionDto> filteredDebts)
    {
        return (sortOption, sortDirection) switch
        {
            ("Id", "Ascending") => filteredDebts.OrderBy(t => t.TransactionId),
            ("Id", "Descending") => filteredDebts.OrderByDescending(t => t.TransactionId),
            ("Date", "Ascending") => filteredDebts.OrderBy(t => t.Date),
            ("Date", "Descending") => filteredDebts.OrderByDescending(t => t.Date),
            _ => filteredDebts
        };
    }

    private string GetDebtStatusClass(string status)
    {
        return status == "Pending" ? "text-danger" : "";
    }



}

