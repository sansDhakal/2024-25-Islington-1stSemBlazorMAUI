@page "/cashInflow"
@using PersonalExpenseTracker.Models
@using PersonalExpenseTracker.Services
@inject ITransactionService transactionservice
@inject NavigationManager navigationManager
@inject AuthenticationStateService authService;

<h3 style="text-align: center; margin-top: 20px; color: #007bff; font-size: 1.5rem;">Cash Inflow</h3>

<form class="transaction-form" style="max-width: 600px; margin: 20px auto; padding: 25px; background-color: #fff; border-radius: 8px; box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);">
    <div class="form-group" style="margin-bottom: 20px;">
        <label for="amount" style="font-weight: bold; font-size: 1rem;">Amount:</label>
        <input type="number" id="amount" class="form-control" @bind="newTransaction.Amount" required placeholder="Enter amount" style="width: 100%; padding: 12px; margin-top: 5px; border-radius: 4px; border: 1px solid #ccc; font-size: 1rem;" />
    </div>

    <div class="form-group" style="margin-bottom: 20px;">
        <label for="tagType" style="font-weight: bold; font-size: 1rem;">Tag Type:</label>
        <select id="tagType" class="form-control" @bind="tagType" required style="width: 100%; padding: 12px; margin-top: 5px; border-radius: 4px; border: 1px solid #ccc; font-size: 1rem;">
            <option value="" disabled selected>Choose your preferred tag type</option>
            <option value="Custom">Custom</option>
            <option value="Existing">Existing</option>
        </select>
    </div>

    @if (tagType == "Existing")
    {
        <div class="form-group" style="margin-bottom: 20px;">
            <label for="existingTag" style="font-weight: bold; font-size: 1rem;">Tag:</label>
            <select id="existingTag" class="form-control" @bind="newTransaction.TagId" required style="width: 100%; padding: 12px; margin-top: 5px; border-radius: 4px; border: 1px solid #ccc; font-size: 1rem;">
                <option value="" disabled selected>Choose your tag</option>
                <option value="Yearly">Yearly</option>
                <option value="Monthly">Monthly</option>
                <option value="Others">Others</option>
            </select>
        </div>
    }
    else
    {
        <div class="form-group" style="margin-bottom: 20px;">
            <label for="customTag" style="font-weight: bold; font-size: 1rem;">Custom Tag:</label>
            <input type="text" id="customTag" class="form-control" @bind="newTransaction.TagId" placeholder="Enter custom tag" style="width: 100%; padding: 12px; margin-top: 5px; border-radius: 4px; border: 1px solid #ccc; font-size: 1rem;" />
        </div>
    }

    <div class="form-group" style="margin-bottom: 20px;">
        <label for="title" style="font-weight: bold; font-size: 1rem;">Title:</label>
        <input type="text" id="title" class="form-control" @bind="newTransaction.Title" required placeholder="Enter title" style="width: 100%; padding: 12px; margin-top: 5px; border-radius: 4px; border: 1px solid #ccc; font-size: 1rem;" />
    </div>

    <div class="form-group" style="margin-bottom: 20px;">
        <label for="note" style="font-weight: bold; font-size: 1rem;">Note:</label>
        <input type="text" id="note" class="form-control" @bind="newTransaction.Note" placeholder="Enter note" style="width: 100%; padding: 12px; margin-top: 5px; border-radius: 4px; border: 1px solid #ccc; font-size: 1rem;" />
    </div>

    <button type="button" class="btn btn-primary" @onclick="AddTransaction" style="display: block; width: 100%; padding: 12px; background-color: #007bff; color: white; border: none; border-radius: 5px; font-size: 1.1rem; cursor: pointer; margin-top: 20px;">
        Add Inflow
    </button>
</form>

@if (errorMessage != null)
{
    <p class="error-message" style="color: red; font-weight: bold; text-align: center; margin-top: 20px;">@errorMessage</p>
}

@code {
    private Transactions newTransaction = new Transactions(); //obj created for Transaction Class

    private string errorMessage;
    private string tagType;

    private async Task AddTransaction()
    {
        // Validation
        if (newTransaction.Amount <= 0)
        {
            errorMessage = "Amount must be greater than zero.";
            return;
        }

        if (string.IsNullOrWhiteSpace(tagType))
        {
            errorMessage = "Tag Type is required.";
            return;
        }

        if (tagType == "Existing" && string.IsNullOrWhiteSpace(newTransaction.TagId))
        {
            errorMessage = "Please select an existing tag.";
            return;
        }

        if (tagType == "Custom" && string.IsNullOrWhiteSpace(newTransaction.TagId))
        {
            errorMessage = "Custom Tag is required.";
            return;
        }

        if (string.IsNullOrWhiteSpace(newTransaction.Title))
        {
            errorMessage = "Title is required.";
            return;
        }

        errorMessage = null;

        var user = authService.GetAuthenticatedUser();
        if (user != null)
        {
            newTransaction.UserId = user.UserId;
            try
            {
                newTransaction.TypeId = "Credit"; // because it is an inflow
                                                  // Save the new transaction
                await transactionservice.SaveTransactionAsync(newTransaction);

                // Reset the object after saving
                newTransaction = new Transactions();
                // Clear any previous error messages
                errorMessage = null;

                // Navigate to the desired page after successful signup
                navigationManager.NavigateTo("/allTransactions");
            }
            catch (Exception ex)
            {
                errorMessage = $"An error occurred while adding the transaction: {ex.Message}";
                Console.WriteLine(errorMessage); // Log for debugging
            }
        }
    }
}
